<?xml version="1.0" encoding="UTF-8" ?>

<SmartSqlMap Scope="Sys.Workflow.Engine.Impl.Persistence.Entity.CompensateEventSubscriptionEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">



  <!-- RESULTMAP -->
  <!--<Discriminator Column="EVENT_TYPE_">
        <Case Value="message" ResultMap="messageResultMap"/>
        <Case Value="signal" ResultMap="signalResultMap"/>
        <Case Value="compensate" ResultMap="compensateResultMap"/>
      </Discriminator>-->

  <ResultMap Id="eventSubscriptionResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.EventSubscriptionEntityImpl,Sys.Bpm.Engine">
    <Result Property="Id" Column="ID_" />
    <Result Property="Revision" Column="REV_" />
    <Result Property="EventType" Column="EVENT_TYPE_" />
    <Result Property="EventName" Column="EVENT_NAME_" />
    <Result Property="ExecutionId" Column="EXECUTION_ID_" />
    <Result Property="ProcessInstanceId" Column="PROC_INST_ID_" />
    <Result Property="ActivityId" Column="ACTIVITY_ID_" />
    <Result Property="Configuration" Column="CONFIGURATION_" />
    <Result Property="Created" Column="CREATED_" />
    <Result Property="ProcessDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="TenantId" Column="TENANT_ID_" />
  </ResultMap>

  <ResultMap Id="messageResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.MessageEventSubscriptionEntityImpl,Sys.Bpm.Engine">
    <Result Property="Id" Column="ID_" />
    <Result Property="Revision" Column="REV_" />
    <Result Property="EventType" Column="EVENT_TYPE_" />
    <Result Property="EventName" Column="EVENT_NAME_" />
    <Result Property="ExecutionId" Column="EXECUTION_ID_" />
    <Result Property="ProcessInstanceId" Column="PROC_INST_ID_" />
    <Result Property="ActivityId" Column="ACTIVITY_ID_" />
    <Result Property="Configuration" Column="CONFIGURATION_" />
    <Result Property="Created" Column="CREATED_" />
    <Result Property="ProcessDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="TenantId" Column="TENANT_ID_" />
  </ResultMap>

  <ResultMap Id="signalResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.SignalEventSubscriptionEntityImpl,Sys.Bpm.Engine">
    <Result Property="Id" Column="ID_" />
    <Result Property="Revision" Column="REV_" />
    <Result Property="EventType" Column="EVENT_TYPE_" />
    <Result Property="EventName" Column="EVENT_NAME_" />
    <Result Property="ExecutionId" Column="EXECUTION_ID_" />
    <Result Property="ProcessInstanceId" Column="PROC_INST_ID_" />
    <Result Property="ActivityId" Column="ACTIVITY_ID_" />
    <Result Property="Configuration" Column="CONFIGURATION_" />
    <Result Property="Created" Column="CREATED_" />
    <Result Property="ProcessDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="TenantId" Column="TENANT_ID_" />
  </ResultMap>

  <ResultMap Id="compensateResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.CompensateEventSubscriptionEntityImpl,Sys.Bpm.Engine">
    <Result Property="Id" Column="ID_" />
    <Result Property="Revision" Column="REV_" />
    <Result Property="EventType" Column="EVENT_TYPE_" />
    <Result Property="EventName" Column="EVENT_NAME_" />
    <Result Property="ExecutionId" Column="EXECUTION_ID_" />
    <Result Property="ProcessInstanceId" Column="PROC_INST_ID_" />
    <Result Property="ActivityId" Column="ACTIVITY_ID_" />
    <Result Property="Configuration" Column="CONFIGURATION_" />
    <Result Property="Created" Column="CREATED_" />
    <Result Property="ProcessDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="TenantId" Column="TENANT_ID_" />
  </ResultMap>

  <!-- DELETE -->

  <Delete  Id="deleteSignalEventSubscription">
    delete from ACT_RU_EVENT_SUBSCR where ID_ = #{id} and REV_ = #{revision}
  </Delete>

  <Delete  Id="deleteCompensateEventSubscription">
    delete from ACT_RU_EVENT_SUBSCR where ID_ = #{id} and REV_ = #{revision}
  </Delete>

  <Delete  Id="deleteMessageEventSubscription">
    delete from ACT_RU_EVENT_SUBSCR where ID_ = #{id} and REV_ = #{revision}
  </Delete>

  <Delete  Id="deleteEventSubscriptionsForProcessDefinition">
    delete from ACT_RU_EVENT_SUBSCR where PROC_DEF_ID_ = #{processDefinitionId}
  </Delete>

  <!-- SELECT -->

  <Statement Id="selectEventSubscriptionByQueryCriteriaSql">
    from ACT_RU_EVENT_SUBSCR RES
    <Where>
      <IsNotNull Property="eventSubscriptionId">
        RES.ID_ = #{eventSubscriptionId}
      </IsNotNull>
      <IsNotNull Property="processInstanceId">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </IsNotNull>
      <IsNotNull Property="executionId">
        and RES.EXECUTION_ID_ = #{executionId}
      </IsNotNull>
      <IsNotNull Property="activityId">
        and RES.ACTIVITY_ID_ = #{activityId}
      </IsNotNull>
      <IsNotNull Property="eventType">
        and RES.EVENT_TYPE_ = #{eventType}
      </IsNotNull>
      <IsNotNull Property="eventName">
        and RES.EVENT_NAME_ = #{eventName}
      </IsNotNull>
      <IsNotNull Property="tenantId">
        and RES.TENANT_ID_ = #{tenantId}
      </IsNotNull>
      <IsNull Property="tenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </IsNull>
    </Where>
  </Statement>

  <Select Id="selectMessageEventSubscriptionsByProcessInstanceAndEventName" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR EVT
    where (EVENT_TYPE_ = 'message')
    and EVENT_NAME_ = #{eventName}
    and PROC_INST_ID_ = #{processInstanceId}
  </Select>

  <Select  Id="selectEventSubscription" ResultMap="eventSubscriptionResultMap">
    select * from ACT_RU_EVENT_SUBSCR where ID_ = #{id}
  </Select>

  <Select  Id="selectEventSubscriptionByQueryCriteria" ResultMap="eventSubscriptionResultMap">
    ${limitBefore}
    select ${top100} RES.* ${limitBetween}
    <Include RefId="selectEventSubscriptionByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </Select>

  <Select  Id="selectEventSubscriptionCountByQueryCriteria">
    select count(distinct RES.ID_)
    <Include RefId="selectEventSubscriptionByQueryCriteriaSql"/>
  </Select>

  <Select  Id="selectSignalEventSubscriptionsByEventName" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR EVT
    left outer join ACT_RU_EXECUTION EXC on EVT.EXECUTION_ID_ = EXC.ID_
    where EVENT_TYPE_ = 'signal'
    and EVENT_NAME_ = #{eventName}
    and (
    (EVT.EXECUTION_ID_ is null)
    or
    (EVT.EXECUTION_ID_ is not null AND EXC.SUSPENSION_STATE_ = 1)
    )
    <IsNotNull Property="tenantId">
      and EVT.TENANT_ID_ = #{tenantId}
    </IsNotNull>
    <IsNull Property="tenantId">
      and (EVT.TENANT_ID_ = '' or EVT.TENANT_ID_ is null)
    </IsNull>
  </Select>

  <Select Id="selectSignalEventSubscriptionsByProcessInstanceAndEventName" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR EVT
    where (EVENT_TYPE_ = 'signal')
    and EVENT_NAME_ = #{eventName}
    and PROC_INST_ID_ = #{processInstanceId}
  </Select>

  <Select  Id="selectSignalEventSubscriptionsByExecution" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = 'signal')
    and (EXECUTION_ID_ = #{executionId})
  </Select>

  <Select  Id="selectSignalEventSubscriptionsByNameAndExecution" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = 'signal')
    and (EXECUTION_ID_ = #{executionId})
    and (EVENT_NAME_ = #{eventName})
  </Select>

  <Select  Id="selectEventSubscriptionsByExecution" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EXECUTION_ID_ = #{executionId})
  </Select>

  <Select Id="selectEventSubscriptionsByProcessInstanceType" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (PROC_INST_ID_ = #{processInstanceId})
  </Select>

  <Select Id="selectEventSubscriptionsByProcessInstanceTypeAndActivity" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (PROC_INST_ID_ = #{processInstanceId})
    and (ACTIVITY_ID_ = #{activityId})
  </Select>

  <Select  Id="selectEventSubscriptionsByExecutionAndType" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (EXECUTION_ID_ = #{executionId})
  </Select>

  <Select  Id="selectEventSubscriptionsByExecutionTypeAndActivity" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (EXECUTION_ID_ = #{executionId})
    and (ACTIVITY_ID_ = #{activityId})
  </Select>

  <Select  Id="selectEventSubscriptionsByConfiguration" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (
    (CONFIGURATION_ = #{configuration})
    or
    (PROC_DEF_ID_ = #{configuration})
    )
    <IsNotNull Property="tenantId">
      and TENANT_ID_ = #{tenantId}
    </IsNotNull>
    <IsNull Property="tenantId">
      and (TENANT_ID_ = '' or TENANT_ID_ is null)
    </IsNull>
  </Select>

  <Select  Id="selectEventSubscriptionsByTypeAndProcessDefinitionId" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    <Where>
      <IsNotNull Property="eventType">
        (EVENT_TYPE_ = #{eventType})
      </IsNotNull>
      and PROC_DEF_ID_ = #{processDefinitionId}
      and EXECUTION_ID_ is null
      and PROC_INST_ID_ is null
      <IsNotNull Property="tenantId">
        and TENANT_ID_ = #{tenantId}
      </IsNotNull>
      <IsNull Property="tenantId">
        and (TENANT_ID_ = '' or TENANT_ID_ is null)
      </IsNull>
    </Where>
  </Select>

  <Select  Id="selectEventSubscriptionsByName" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (EVENT_NAME_ = #{eventName})
    <IsNotNull Property="tenantId">
      and TENANT_ID_ = #{tenantId}
    </IsNotNull>
    <IsNull Property="tenantId">
      and (TENANT_ID_ = '' or TENANT_ID_ is null)
    </IsNull>
  </Select>

  <Select  Id="selectEventSubscriptionsByNameAndExecution" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{eventType})
    and (EVENT_NAME_ = #{eventName})
    and (EXECUTION_ID_ = #{executionId})
  </Select>

  <Select  Id="selectMessageStartEventSubscriptionByName" ResultMap="eventSubscriptionResultMap">
    select *
    from ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = 'message')
    and (EVENT_NAME_ = #{eventName})
    and EXECUTION_ID_ is null
    <IsTrue Property="tenantId != null">
      and TENANT_ID_ = #{tenantId}
    </IsTrue>
    <IsTrue Property="tenantId == null">
      and (TENANT_ID_ = '' or TENANT_ID_ is null)
    </IsTrue>
  </Select>

  <!-- MESSAGE INSERT -->

  <Insert Id="insertMessageEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values (#{id},
    1,
    'message',
    #{eventName},
    #{executionId},
    #{processInstanceId},
    #{activityId},
    #{configuration},
    #{created},
    #{processDefinitionId},
    #{tenantId}
    )
  </Insert>

  <Insert Id="bulkInsertMessageEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values
    <For Prepend="" Key="p" Open="" Close="" Property="Items" Separator=",">
      (#{id},
      1,
      #{eventType},
      #{eventName},
      #{executionId},
      #{processInstanceId},
      #{activityId},
      #{configuration},
      #{created},
      #{processDefinitionId},
      #{tenantId})
    </For>
  </Insert>

  <!-- MESSAGE UPDATE -->

  <Update  Id="updateMessageEventSubscription">
    update ACT_RU_EVENT_SUBSCR
    <Set>
      REV_ =  #{revisionNext},
      EVENT_NAME_ = #{eventName},
      EXECUTION_ID_ = #{executionId},
      PROC_INST_ID_ = #{processInstanceId},
      ACTIVITY_ID_ = #{activityId},
      CONFIGURATION_ = #{configuration},
      CREATED_ = #{created},
      PROC_DEF_ID_ = #{processDefinitionId},
      TENANT_ID_ = #{tenantId}
    </Set>
    where ID_= #{id}
    and REV_ = #{revision}
  </Update>

  <!-- SIGNAL INSERT -->

  <Insert Id="insertSignalEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values (#{id},
    1,
    'signal',
    #{eventName},
    #{executionId},
    #{processInstanceId},
    #{activityId},
    #{configuration},
    #{created},
    #{processDefinitionId},
    #{tenantId}
    )
  </Insert>

  <Insert Id="bulkInsertSignalEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values
    <For Prepend="" Key="p" Open="" Close="" Property="Items" Separator=",">
      (#{signalEventSubscription.id},
      1,
      #{eventType},
      #{eventName},
      #{executionId},
      #{processInstanceId},
      #{activityId},
      #{configuration},
      #{created},
      #{processDefinitionId},
      #{tenantId})
    </For>
  </Insert>

  <!-- SIGNAL UPDATE -->

  <Update  Id="updateSignalEventSubscription">
    update ACT_RU_EVENT_SUBSCR
    <Set>
      REV_ =  #{revisionNext},
      EVENT_NAME_ = #{eventName},
      EXECUTION_ID_ = #{executionId},
      PROC_INST_ID_ = #{processInstanceId},
      ACTIVITY_ID_ = #{activityId},
      CONFIGURATION_ = #{configuration},
      CREATED_ = #{created},
      PROC_DEF_ID_ = #{processDefinitionId},
      TENANT_ID_ = #{tenantId}
    </Set>
    where ID_= #{id}
    and REV_ = #{revision}
  </Update>

  <!-- Compensate INSERT -->

  <Insert Id="insertCompensateEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values (#{id},
    1,
    'compensate',
    #{eventName},
    #{executionId},
    #{processInstanceId},
    #{activityId},
    #{configuration},
    #{created},
    #{processDefinitionId},
    #{tenantId}
    )
  </Insert>

  <Insert Id="bulkInsertCompensateEventSubscription">
    insert into ACT_RU_EVENT_SUBSCR (
    ID_,
    REV_,
    EVENT_TYPE_,
    EVENT_NAME_,
    EXECUTION_ID_,
    PROC_INST_ID_,
    ACTIVITY_ID_,
    CONFIGURATION_,
    CREATED_,
    PROC_DEF_ID_,
    TENANT_ID_
    )
    values
    <For Prepend="" Key="p" Open="" Close="" Property="Items" Separator=",">
      (#{id},
      1,
      #{eventType},
      #{eventName},
      #{executionId},
      #{processInstanceId},
      #{activityId},
      #{configuration},
      #{created},
      #{processDefinitionId},
      #{tenantId})
    </For>
  </Insert>

  <!-- Compensate UPDATE -->

  <Update  Id="updateCompensateEventSubscription">
    update ACT_RU_EVENT_SUBSCR
    <Set>
      REV_ =  #{revisionNext},
      EVENT_NAME_ = #{eventName},
      EXECUTION_ID_ = #{executionId},
      PROC_INST_ID_ = #{processInstanceId},
      ACTIVITY_ID_ = #{activityId},
      CONFIGURATION_ = #{configuration},
      CREATED_ = #{created},
      PROC_DEF_ID_ = #{processDefinitionId},
      TENANT_ID_ = #{tenantId}
    </Set>
    where ID_= #{id}
    and REV_ = #{revision}
  </Update>

  <!--  tenantId update -->
  <Update  Id="updateTenantIdOfEventSubscriptions">
    update ACT_RU_EVENT_SUBSCR
    <Set>
      TENANT_ID_ = #{newTenantId}
    </Set>
    where TENANT_ID_ = #{oldTenantId}
  </Update>

</SmartSqlMap>
