///////////////////////////////////////////////////////////
//  GetBookmarkRuleProvider.cs
//  Implementation of the Class GetBookmarkRuleProvider
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using Sys.Workflow.Bpmn.Constants;
using Sys.Workflow.Bpmn.Models;
using Sys.Workflow.Engine.Delegate;
using Sys.Workflow.Engine.Exceptions;
using Sys.Workflow.Engine.Impl.Persistence.Entity;
using Sys.Workflow.Engine.Impl.Util;
using Sys.Workflow;
using System.Collections.Generic;
using System.Linq;

namespace Sys.Workflow.Engine.Impl.Bpmn.Listeners
{
    /// <summary>
    /// 运行时分配节点运行人员,监听节点的Excution创建事件,在流程进入节点时根据当前数据变量获取
    /// 当前节点任务处理人
    /// </summary>
    public class RuntimeAssigneeExecutionListener : IExecutionListener
    {
        /// <summary>
        /// 侦听接收通知处理
        /// </summary>
        /// <param name="execution"></param>
        public void Notify(IExecutionEntity execution)
        {
            UserTask task = execution.CurrentFlowElement as UserTask;

            if (task.ExtensionElements.TryGetValue(BpmnXMLConstants.ELEMENT_EXTENSIONS_PROPERTY, out IList<ExtensionElement> exts))
            {
                if (bool.TryParse(exts.GetAttributeValue(BpmnXMLConstants.ACTIITI_RUNTIME_ASSIGNEE), out bool result) == false || result == false)
                {
                    return;
                }

                var variable = execution.GetVariableInstance(BpmnXMLConstants.RUNTIME_ASSIGNEE_USER_VARIABLE_NAME);

                RuntimeAssigneeUser user = JToken.FromObject(variable.Value).ToObject<RuntimeAssigneeUser>();

                if ((user?.Users?.Count()).GetValueOrDefault() == 0)
                {
                    throw new NotFoundAssigneeException();
                }

                var varName = exts.GetAttributeValue(BpmnXMLConstants.ACTIITI_RUNTIME_ASSIGNEE_VARIABLE);

                if (string.IsNullOrWhiteSpace(varName))
                {
                    varName = user.Field;
                }

                execution.SetLoopVariable(varName, user.Users.Distinct().ToArray());
            }
        }
    }
}
